name: Flutter CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.32.8'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: flutter analyze --fatal-infos
      
    - name: Run tests
      run: flutter test --coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        name: codecov-umbrella
        fail_ci_if_error: true

  build_android:
    name: Build Android
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK (Debug)
      run: flutter build apk --debug --flavor development
      
    - name: Build APK (Release)
      if: github.event_name == 'release'
      run: flutter build apk --release --flavor production
      
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/*.apk

  build_ios:
    name: Build iOS
    needs: test
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build iOS (Debug)
      run: flutter build ios --debug --no-codesign --flavor development
      
    - name: Build iOS (Release)
      if: github.event_name == 'release'
      run: flutter build ios --release --no-codesign --flavor production

  deploy_development:
    name: Deploy to Development
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to Firebase App Distribution
      run: |
        echo "Deploying to Firebase App Distribution..."
        # Aquí iría la configuración real de Firebase App Distribution

  deploy_staging:
    name: Deploy to Staging
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Internal Testing
      run: |
        echo "Deploying to Internal Testing..."
        # Aquí iría la configuración real de Internal Testing

  deploy_production:
    name: Deploy to Production
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Deploy to App Stores
      run: |
        echo "Deploying to Production App Stores..."
        # Aquí iría la configuración real de App Store y Play Store
