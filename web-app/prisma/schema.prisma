// Prisma Schema - Mercenary Platform (SQLite Compatible)
// Simplified version for local testing

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION MODELS (NextAuth.js) =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===== CORE USER MODELS =====

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String    @unique
  emailVerified           DateTime?
  image                   String?
  password                String
  role                    UserRole  @default(CLIENT)
  isActive                Boolean   @default(true)
  lastLoginAt             DateTime?
  notificationPreferences String?   // JSON string for notification preferences
  
  // Security fields
  two_factor_enabled      Boolean   @default(false)
  two_factor_secret       String?
  two_factor_backup_codes String?   // JSON array of hashed backup codes
  account_locked_until    DateTime?
  status                  String    @default("ACTIVE") // ACTIVE, SUSPENDED, BANNED
  suspended_until         DateTime?
  suspension_reason       String?
  ban_reason              String?
  longest_streak          Int       @default(0)
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  accounts                Account[]
  sessions                Session[]
  profile                 Profile?
  projects                Project[]  @relation("ClientProjects")
  freelancerProjects      Project[]  @relation("FreelancerProjects")
  sentMessages            Message[]  @relation("SentMessages")
  receivedMessages        Message[]  @relation("ReceivedMessages")
  notifications           Notification[]
  payments                Payment[]
  reviews                 Review[]
  transactions            Transaction[]
  devices                 Device[]  // Mobile devices
  
  // Security relations
  twoFactorAuth           TwoFactorAuth?
  encryptionKey           UserEncryptionKey?
  archivedKeys            ArchivedEncryptionKey[]
  biometricChallenges     BiometricChallenge[]
  userSessions            UserSession[]
  sentEncryptedMessages   EncryptedChatMessage[] @relation("SentEncryptedMessages")
  receivedEncryptedMessages EncryptedChatMessage[] @relation("ReceivedEncryptedMessages")
  ephemeralKeys           EphemeralChatKey[]
  auditLogs               AuditLog[]
  securityLogs            SecurityLog[]
  securityAlerts          SecurityAlert[]
  fraudDetections         FraudDetection[]
  submittedReports        AbuseReport[] @relation("ReportedBy")
  receivedReports         AbuseReport[] @relation("ReceivedReports")
  trustScore              UserTrustScore?
  warnings                UserWarning[]
  reviewsReceived         Review[] @relation("ReviewsReceived")

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  skills      String?  // JSON string for skills array
  experience  Int      @default(0) // Years of experience
  rating      Float    @default(0.0)
  level       Int      @default(1)
  badges      String?  // JSON string for badges array
  location    String?
  phone       String?
  website     String?
  portfolio   String?
  hourlyRate  Float?
  availability String? // "available", "busy", "unavailable"
  
  // Gamification
  xp          Int      @default(0)
  coins       Int      @default(0)
  totalEarnings Float  @default(0)
  completedProjects Int @default(0)
  
  // Social
  linkedin    String?
  github      String?
  twitter     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// ===== PROJECT MODELS =====

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime?
  status      ProjectStatus @default(DRAFT)
  category    String
  skills      String?       // JSON string for required skills
  clientId    String
  freelancerId String?
  
  // Project details
  attachments String?       // JSON string for file URLs
  priority    Priority      @default(MEDIUM)
  complexity  Complexity    @default(MEDIUM)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  client      User          @relation("ClientProjects", fields: [clientId], references: [id])
  freelancer  User?         @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  messages    Message[]
  transactions Transaction[]
  reviews     Review[]

  @@map("projects")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  senderId  String
  receiverId String
  projectId String?
  type      MessageType @default(TEXT)
  attachments String?   // JSON string for file URLs
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])

  @@map("messages")
}

// ===== TRANSACTION MODELS =====

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  userId      String
  projectId   String?
  
  // Payment details
  paymentMethod String?
  paymentId     String?         // External payment ID
  fees          Float           @default(0)
  netAmount     Float           // Amount after fees
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  processedAt DateTime?

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@map("transactions")
}

// ===== REVIEW MODELS =====

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  reviewerId  String
  revieweeId  String
  projectId   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reviewer User    @relation(fields: [reviewerId], references: [id])
  reviewee User    @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  project  Project @relation(fields: [projectId], references: [id])

  @@unique([reviewerId, projectId]) // One review per project per user
  @@map("reviews")
}

// ===== NOTIFICATION MODELS =====

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  userId    String
  isRead    Boolean          @default(false)
  data      String?          // JSON string for additional data
  
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// ===== ENUMS =====

enum UserRole {
  CLIENT
  FREELANCER
  ADMIN
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Complexity {
  SIMPLE
  MEDIUM
  COMPLEX
  EXPERT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum TransactionType {
  PAYMENT
  REFUND
  COMMISSION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  PROJECT_UPDATE
  MESSAGE
  PAYMENT
  REVIEW
  SYSTEM
  MARKETING
}

// ===== SECURITY MODELS =====

// Two-Factor Authentication
model TwoFactorAuth {
  id          String   @id @default(cuid())
  userId      String   @unique
  secret      String   // Encrypted TOTP secret
  backupCodes String   // Encrypted backup codes JSON
  isEnabled   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// User Sessions
model UserSession {
  id              String    @id @default(cuid())
  userId          String
  sessionToken    String    @unique
  deviceId        String
  ipAddress       String
  userAgent       String
  location        String?
  isActive        Boolean   @default(true)
  isTrusted       Boolean   @default(false)
  lastActivity    DateTime  @default(now())
  expiresAt       DateTime
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Device Management
model Device {
  id           String   @id @default(cuid())
  userId       String
  deviceId     String   @unique
  deviceName   String
  deviceType   String   // mobile, desktop, tablet
  platform     String   // iOS, Android, Windows, etc.
  fingerprint  String   // Device fingerprint hash
  isRegistered Boolean  @default(false)
  isTrusted    Boolean  @default(false)
  lastSeen     DateTime @default(now())
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

// Biometric Challenges
model BiometricChallenge {
  id          String   @id @default(cuid())
  userId      String
  challenge   String   // Encrypted challenge data
  deviceId    String
  isCompleted Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("biometric_challenges")
}

// Chat Encryption Keys
model UserEncryptionKey {
  id         String   @id @default(cuid())
  userId     String   @unique
  publicKey  String   // RSA public key
  privateKey String   // Encrypted RSA private key
  keyVersion Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_encryption_keys")
}

// Archived Encryption Keys
model ArchivedEncryptionKey {
  id         String   @id @default(cuid())
  userId     String
  publicKey  String
  privateKey String   // Encrypted
  keyVersion Int
  archivedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("archived_encryption_keys")
}

// Encrypted Chat Messages
model EncryptedChatMessage {
  id              String   @id @default(cuid())
  messageId       String   @unique // Reference to original message
  senderId        String
  receiverId      String
  encryptedData   String   // AES encrypted message
  keyFingerprint  String   // Key used for encryption
  ephemeralKeyId  String?
  integrityHash   String   // Message integrity verification
  createdAt       DateTime @default(now())

  sender        User              @relation("SentEncryptedMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User              @relation("ReceivedEncryptedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  ephemeralKey  EphemeralChatKey? @relation(fields: [ephemeralKeyId], references: [id])

  @@map("encrypted_chat_messages")
}

// Ephemeral Chat Keys
model EphemeralChatKey {
  id          String   @id @default(cuid())
  userId      String
  keyData     String   // Encrypted ephemeral key
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())

  user     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages EncryptedChatMessage[]

  @@map("ephemeral_chat_keys")
}

// Audit Logs
model AuditLog {
  id          String               @id @default(cuid())
  userId      String?
  action      String               // Action performed
  resource    String               // Resource affected
  details     String?              // JSON details
  ipAddress   String
  userAgent   String
  severity    AuditLogSeverity     @default(LOW)
  status      AuditLogStatus       @default(SUCCESS)
  createdAt   DateTime             @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Security Logs
model SecurityLog {
  id          String              @id @default(cuid())
  userId      String?
  eventType   SecurityEventType
  description String
  severity    SecuritySeverity    @default(LOW)
  ipAddress   String
  userAgent   String
  metadata    String?             // JSON metadata
  resolved    Boolean             @default(false)
  createdAt   DateTime            @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_logs")
}

// Security Alerts
model SecurityAlert {
  id          String           @id @default(cuid())
  userId      String?
  alertType   SecurityAlertType
  title       String
  description String
  severity    SecuritySeverity @default(MEDIUM)
  isResolved  Boolean          @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("security_alerts")
}

// Rate Limiting
model RateLimit {
  id          String   @id @default(cuid())
  identifier  String   // IP or user ID
  endpoint    String   // API endpoint
  requests    Int      @default(1)
  windowStart DateTime @default(now())
  isBlocked   Boolean  @default(false)
  blockedUntil DateTime?

  @@unique([identifier, endpoint])
  @@map("rate_limits")
}

// Fraud Detection
model FraudDetection {
  id            String          @id @default(cuid())
  userId        String?
  ipAddress     String
  action        String          // Action being monitored
  riskScore     Int             @default(0) // 0-100
  riskFactors   String          // JSON array of risk factors
  decision      FraudDecision   @default(ALLOW)
  reviewRequired Boolean        @default(false)
  createdAt     DateTime        @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("fraud_detection")
}

// Abuse Reports
model AbuseReport {
  id          String            @id @default(cuid())
  reporterId  String
  reportedId  String
  category    AbuseCategory
  description String
  evidence    String?           // JSON evidence data
  status      AbuseReportStatus @default(PENDING)
  priority    AbusePriority     @default(MEDIUM)
  reviewedBy  String?
  reviewedAt  DateTime?
  resolution  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  reporter User @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)
  reported User @relation("ReceivedReports", fields: [reportedId], references: [id], onDelete: Cascade)

  @@map("abuse_reports")
}

// User Trust Score
model UserTrustScore {
  id                    String   @id @default(cuid())
  userId                String   @unique
  overallScore          Int      @default(50) // 0-100
  accountAgeScore       Int      @default(0)
  verificationScore     Int      @default(0)
  activityScore         Int      @default(0)
  reputationScore       Int      @default(0)
  behaviorScore         Int      @default(50)
  lastCalculated        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_trust_scores")
}

// User Warnings
model UserWarning {
  id          String        @id @default(cuid())
  userId      String
  type        WarningType
  reason      String
  description String?
  severity    WarningSeverity @default(LOW)
  isActive    Boolean       @default(true)
  expiresAt   DateTime?
  issuedBy    String        // Admin user ID
  createdAt   DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_warnings")
}

// Payment Model (missing)
model Payment {
  id            String          @id @default(cuid())
  userId        String
  amount        Float
  currency      String          @default("CLP")
  method        PaymentMethod
  status        PaymentStatus   @default(PENDING)
  externalId    String?         // MercadoPago payment ID
  description   String?
  metadata      String?         // JSON metadata
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  processedAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// ===== SECURITY ENUMS =====

enum AuditLogSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditLogStatus {
  SUCCESS
  FAILURE
  ERROR
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILURE
  PASSWORD_CHANGE
  EMAIL_CHANGE
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  SUSPICIOUS_ACTIVITY
  ACCOUNT_LOCKED
  SESSION_EXPIRED
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SecurityAlertType {
  BRUTE_FORCE
  SUSPICIOUS_LOGIN
  MULTIPLE_FAILED_ATTEMPTS
  UNUSUAL_ACTIVITY
  ACCOUNT_COMPROMISE
  DATA_BREACH
}

enum FraudDecision {
  ALLOW
  CHALLENGE
  BLOCK
}

enum AbuseCategory {
  SPAM
  HARASSMENT
  FRAUD
  INAPPROPRIATE_CONTENT
  FAKE_PROFILE
  SCAM
}

enum AbuseReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum AbusePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WarningType {
  BEHAVIOR
  CONTENT
  SPAM
  FRAUD
  TERMS_VIOLATION
}

enum WarningSeverity {
  LOW
  MEDIUM
  HIGH
  FINAL
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MERCADOPAGO
  PAYPAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
