// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Prisma Schema - Mercenary Platform
// Authentication + Core Models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== AUTHENTICATION MODELS (NextAuth.js) =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ===== CORE USER MODELS =====

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // null for OAuth users
  name          String
  image         String?
  role          Role      @default(FREELANCER)
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication relations
  accounts Account[]
  sessions Session[]

  // Core relations
  profile          Profile?
  projectsAsClient Project[] @relation("ClientProjects")
  projectsAsFreelancer Project[] @relation("FreelancerProjects")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  transactions     Transaction[]
  notifications    Notification[]
  reviews          Review[]
  reviewsReceived  Review[] @relation("ReviewsReceived")

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  skills      String[] // Array of skills
  experience  Int      @default(0) // Years of experience
  rating      Float    @default(0.0)
  level       Int      @default(1)
  badges      String[] // Array of badge IDs
  location    String?
  phone       String?
  website     String?
  portfolio   String?
  hourlyRate  Float?
  availability String? // "available", "busy", "unavailable"
  
  // Gamification
  xp          Int      @default(0)
  coins       Int      @default(0)
  totalEarnings Float  @default(0)
  completedProjects Int @default(0)
  
  // Social
  linkedin    String?
  github      String?
  twitter     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// ===== PROJECT MODELS =====

model Project {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  budget      Float
  deadline    DateTime?
  status      ProjectStatus @default(OPEN)
  category    String
  skills      String[]      // Required skills
  clientId    String
  freelancerId String?
  
  // Project details
  attachments String[]      // File URLs
  priority    Priority      @default(MEDIUM)
  complexity  Complexity    @default(MEDIUM)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  // Relations
  client      User          @relation("ClientProjects", fields: [clientId], references: [id])
  freelancer  User?         @relation("FreelancerProjects", fields: [freelancerId], references: [id])
  messages    Message[]
  transactions Transaction[]
  reviews     Review[]

  @@map("projects")
}

model Message {
  id        String      @id @default(cuid())
  content   String      @db.Text
  senderId  String
  receiverId String
  projectId String?
  type      MessageType @default(TEXT)
  attachments String[]  // File URLs
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])

  @@map("messages")
}

// ===== TRANSACTION MODELS =====

model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  userId      String
  projectId   String?
  
  // Payment details
  paymentMethod String?
  paymentId     String?         // External payment ID
  fees          Float           @default(0)
  netAmount     Float           // Amount after fees
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  processedAt DateTime?

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@map("transactions")
}

// ===== REVIEW MODELS =====

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?  @db.Text
  reviewerId  String
  revieweeId  String
  projectId   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reviewer User    @relation(fields: [reviewerId], references: [id])
  reviewee User    @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  project  Project @relation(fields: [projectId], references: [id])

  @@unique([reviewerId, projectId]) // One review per project per user
  @@map("reviews")
}

// ===== NOTIFICATION MODELS =====

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      NotificationType
  userId    String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data as JSON
  
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// ===== ENUMS =====

enum Role {
  CLIENT
  FREELANCER
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Complexity {
  SIMPLE
  MEDIUM
  COMPLEX
  EXPERT
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
}

enum TransactionType {
  PAYMENT
  REFUND
  WITHDRAWAL
  DEPOSIT
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum NotificationType {
  PROJECT_UPDATE
  MESSAGE
  PAYMENT
  REVIEW
  SYSTEM
  MARKETING
}
